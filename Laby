#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>


/// Variable modifiable

#define tailleLab 30


/// Structure

typedef struct Case Case;
struct Case{
    int type;
    int* accesCase[4]; // 0 == up; 1 == right; 2 == down; 3 == left
};



/// modif adresse en type ...


/// Fonctions

//initialise les tableaux.
void init(int t,Case** tabLaby, int** typeCase){

    for (int k = 0; k < t; k++) {
        tabLaby[0][k].type = 15;
        tabLaby[k][0].type = 15;
        tabLaby[t - 1][k].type = 15;
        tabLaby[k][t - 1].type = 15;
        for (int i = 0; i < 4; i++) {
            tabLaby[0][k].accesCase[i] = 0;
            tabLaby[k][0].accesCase[i] = 0;
            tabLaby[t - 1][k].accesCase[i] = 0;
            tabLaby[k][t - 1].accesCase[i] = 0;
        }

    }


    for (int l = 1; l < t-1; l++) {
        for (int j = 1; j < t-1; j++) {
            tabLaby[l][j].type = 16;
        }
    }

    tabLaby[(rand() % t-2) + 1][0].type = 1;
    int sortie1 = (rand() % t-2) +1;
    tabLaby[sortie1][(t-1)].type = 1;
    int sortie2 = (rand() % t-2) +1;
    while (sortie1 != sortie2) sortie2 = (rand() % t-2) +1;
    tabLaby[sortie2][(t-1)].type = 1;
    for (int i = 0; i < 4; i++) {

        tabLaby[(rand() % t-1 + 1)][0].accesCase[i] = 1;
        tabLaby[(rand() % t-1 + 1)][(t-1)].accesCase[i] = 1;
        tabLaby[(rand() % t-1 + 1)][(t-1)].accesCase[i] = 1;
    }

    typeDeCase(typeCase);



}





// Donne les sorties et entrees pour chaque type de case
void typeDeCase(int** typeCase){
    // 0 == up; 1 == right; 2 == down; 3 == left

    int i = 0, j = 0;
    while (i++ < 16){
        while (j++ < 4){
            if ((i == 1 && (j == 0 || j == 2))
                || (i == 0 && (j == 1 || j == 3))
                || (i == 2 && (j == 1 || j == 2 || j == 3))
                || (i == 3 && (j == 0 || j == 1 || j == 3))
                || (i == 4 && (j == 0 || j == 2 || j == 1))
                || (i == 5 && (j == 0 || j == 2 || j == 3))
                || (i == 6 && (j == 0 || j == 3))
                || (i == 7 && (j == 0 || j == 1))
                || (i == 8 && (j == 2 || j == 3))
                || (i == 9 && (j == 2 || j == 1))
                || (i == 10 && j == 0)
                || (i == 11 && j == 3)
                || (i == 12 && j == 2)
                || (i == 13 && j == 1)
                || (i == 15)
                ){
                    typeCase[i][j] = 0; //fermer
                } else {
                    typeCase[i][j] = 1; //ouvert
                }
        }
    }

}



// choisie au hasard un type de case qui a la meme entrer que la sortie de la case precedente.
void tabFiller(int t, Case ** tab, int ** tabC){
    int r;
    for (int i = 1; i < t-1; i++){
        for(int j = 1; j < t-1; j++){
            do{
                r = rand()%15;
                printf("%d\n", r);
            } while((tab[i-1][j].type != 16 && tabC[r][0] != tab[i-1][j].accesCase[2])
                  && (tab[i][j+1].type != 16 && tabC[r][1] != tab[i][j+1].accesCase[3])
                  && (tab[i+1][j].type != 16 && tabC[r][2] != tab[i+1][j].accesCase[0])
                  && (tab[i][j-1].type != 16 && tabC[r][3] != tab[i][j-1].accesCase[1])
                  );
            tab[i][j].type = r;
            for(int k = 0; k < 4; k++) tab[i][j].accesCase[k] = tabC[r][k];
            printf("%d ", r);
        }
        printf("\n");
    }
}





void errorCheck(int t, Case ** tab){
    for (int i = 0; i < t; i++){
        for (int j = 0; j < t; j++){
            if (tab[i][j].type == 16){
                printf(" ---- ERROR ---- \n ---- CHECK ---- \n %d %d",i,j);
                exit(0);
            }
        }
    }
}


/// Print

// affiche le type de chaque case en fontion de leur enplacement .
void tabPrinter(int t,Case ** tabLaby){

    for (int i = 0; i < t; i++) {
        for (int j = 0; j < t; j++) {
            if (tabLaby[i][j].type <= 9){
                printf(" %d ", tabLaby[i][j].type);
            } else {
                printf("%d ", tabLaby[i][j].type);
            }
        }
        printf("\n");
    }
    printf("\n");

}


// affiche sur l'ecran.
void labyPrinter(int t, Case ** tab) {
    for (int i = 0; i < t; i++) {
        for (int k = 0; k < 3; k++){
            for (int j = 0; j < t; j++) {
                dessinateur(tab[i][j].type, k);
            }
            printf("\n");
        }
    }

}


// dessine le labyrinthe.
void dessinateur(int n, int p){
    if (((n == 1 || n == 6 || n == 7 || n == 5 || n == 4 || n == 3 || n == 10) && p == 0)
        ||((n == 1 || n == 8 || n == 9 || n == 5 || n == 2 || n == 4 || n == 12) && p == 2)
        || n == 15)
    {
        printf("0000");
    } else if (((n == 0 || n == 8 || n == 9 || n == 2 || n == 11 || n == 12 || n == 13 || n == 14) && p == 0)
        ||((n == 0 || n == 2 || n == 3) && p == 1)
        ||((n == 0 || n == 6 || n == 7 || n == 3 || n == 11 || n == 13 || n == 10 || n == 14) && p == 2))
    {
        printf("0  0");
    } else if ((n == 6 || n == 8 || n == 5 || n == 11) && p == 1)
    {
        printf("0   ");
    } else if ((n == 7 || n == 9 || n == 4 || n == 13) && p == 1)
    {
        printf("   0");
    } else if ((n == 1 || n == 10 || n == 12 || n == 14) && p == 1)
    {
        printf("    ");
    }
}



/// Main

int main() {
    srand(time(0));
    Case ** tabLaby = (Case **)malloc(tailleLab * sizeof(Case *));
    for (int i = 0; i < tailleLab; ++i) {
        tabLaby[i] = (Case *)malloc(tailleLab * sizeof(Case));
    }

    int ** typeCase = (int **)malloc(15 * sizeof(int *));
    for (int i = 0; i < tailleLab; ++i) {
        typeCase[i] = (int *)malloc(15 * sizeof(int));
    }

    init(tailleLab, tabLaby, typeCase);
    tabFiller(tailleLab, tabLaby, typeCase);
    errorCheck(tailleLab, tabLaby);

    tabPrinter(tailleLab, tabLaby);
    labyPrinter(tailleLab,tabLaby);

    return 0;
}
